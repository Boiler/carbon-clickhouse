// Code generated by protoc-gen-go.
// source: carbon.proto
// DO NOT EDIT!

/*
Package carbon is a generated protocol buffer package.

It is generated from these files:
	carbon.proto

It has these top-level messages:
	Metric
	Message
*/
package carbon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Metric struct {
	Name       []byte    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamps []uint32  `protobuf:"varint,2,rep,packed,name=timestamps" json:"timestamps,omitempty"`
	Values     []float64 `protobuf:"fixed64,3,rep,packed,name=values" json:"values,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Metric) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Metric) GetTimestamps() []uint32 {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *Metric) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Message struct {
	Data []*Metric `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetData() []*Metric {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Metric)(nil), "Metric")
	proto.RegisterType((*Message)(nil), "Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Carbon service

type CarbonClient interface {
	// Store parses request, sends them to internal queue and returns response.
	// Data may be lost during server restart.
	Store(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// StoreSync returns response only after data has written to drive.
	StoreSync(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type carbonClient struct {
	cc *grpc.ClientConn
}

func NewCarbonClient(cc *grpc.ClientConn) CarbonClient {
	return &carbonClient{cc}
}

func (c *carbonClient) Store(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Carbon/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carbonClient) StoreSync(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Carbon/StoreSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Carbon service

type CarbonServer interface {
	// Store parses request, sends them to internal queue and returns response.
	// Data may be lost during server restart.
	Store(context.Context, *Message) (*google_protobuf.Empty, error)
	// StoreSync returns response only after data has written to drive.
	StoreSync(context.Context, *Message) (*google_protobuf.Empty, error)
}

func RegisterCarbonServer(s *grpc.Server, srv CarbonServer) {
	s.RegisterService(&_Carbon_serviceDesc, srv)
}

func _Carbon_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Carbon/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonServer).Store(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carbon_StoreSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonServer).StoreSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Carbon/StoreSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonServer).StoreSync(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Carbon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Carbon",
	HandlerType: (*CarbonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _Carbon_Store_Handler,
		},
		{
			MethodName: "StoreSync",
			Handler:    _Carbon_StoreSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carbon.proto",
}

func init() { proto.RegisterFile("carbon.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8e, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x8d, 0xa9, 0xa9, 0x8e, 0xf5, 0x32, 0x87, 0x12, 0x5a, 0x90, 0xb0, 0x07, 0x09, 0x08,
	0x59, 0xa8, 0x8f, 0x20, 0x1e, 0x7b, 0x49, 0x7d, 0x81, 0xec, 0x3a, 0x5d, 0x0a, 0xcd, 0x66, 0x49,
	0x52, 0x61, 0xdf, 0x5e, 0xcc, 0xae, 0xe0, 0xb1, 0xb7, 0xf9, 0xbf, 0x99, 0x9f, 0xf9, 0x60, 0xd5,
	0xba, 0xd8, 0x84, 0xde, 0x0c, 0x31, 0xe4, 0xb0, 0xd9, 0x76, 0x21, 0x74, 0x67, 0xaa, 0x4b, 0x6a,
	0x2e, 0xc7, 0x9a, 0xfc, 0x90, 0xc7, 0x69, 0x59, 0x7d, 0x82, 0xd8, 0x53, 0x8e, 0xa7, 0x16, 0x11,
	0x16, 0xbd, 0xf3, 0x24, 0x99, 0x62, 0x7a, 0x65, 0xcb, 0x8c, 0xcf, 0x00, 0xf9, 0xe4, 0x29, 0x65,
	0xe7, 0x87, 0x24, 0x6f, 0x15, 0xd7, 0x4f, 0xf6, 0x1f, 0xc1, 0x35, 0x88, 0x6f, 0x77, 0xbe, 0x50,
	0x92, 0x5c, 0x71, 0xcd, 0xec, 0x9c, 0xaa, 0x17, 0x58, 0xee, 0x29, 0x25, 0xd7, 0x11, 0x6e, 0x61,
	0xf1, 0xe5, 0xb2, 0x93, 0x4c, 0x71, 0xfd, 0xb8, 0x5b, 0x9a, 0xe9, 0x9b, 0x2d, 0x70, 0x77, 0x04,
	0xf1, 0x5e, 0x54, 0xf1, 0x15, 0xee, 0x0e, 0x39, 0x44, 0xc2, 0x7b, 0x33, 0x37, 0x37, 0x6b, 0x33,
	0x89, 0x9b, 0x3f, 0x71, 0xf3, 0xf1, 0x2b, 0x5e, 0xdd, 0x60, 0x0d, 0x0f, 0xe5, 0xf8, 0x30, 0xf6,
	0xed, 0x35, 0x85, 0x46, 0x14, 0xf2, 0xf6, 0x13, 0x00, 0x00, 0xff, 0xff, 0x28, 0xf0, 0x90, 0x0a,
	0x19, 0x01, 0x00, 0x00,
}
